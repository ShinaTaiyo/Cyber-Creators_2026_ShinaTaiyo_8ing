//============================================================================
// 
// ２０２５年４月２８日：ブロッククラスを作成 [Timer.cpp]
// Author : 椎名太陽
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************

// === オブジェクト ===

#include "timer.h"
#include "number.h"

// === 情報 ===

#include "calculation.h" // 計算用

// === その他 ===

#include "manager.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace useful;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CTimer::CTimer() :
	CObject{ LAYER::FRONT },
	m_Pos{VEC3_INIT},
	m_NumberSize{VEC3_INIT},
	m_nCntFrame{0},
	m_nNowTime{s_nMaxTime},
	m_bEnd{false},
	m_nNumDigit{0}
{
	SetType(CObject::TYPE::TIMER); // タイプを「タイマー」に設定

	int nMaxTime = s_nMaxTime; // 最大時間

	m_nNumDigit = Calculation::Value::NumDigit(nMaxTime); // 桁数を求める
}

//============================================================================
// デストラクタ
//============================================================================
CTimer::~CTimer()
{
	for (auto& Number : m_vpNumber)
	{
		Number->SetRelease();
	}
	m_vpNumber.clear();
}

//============================================================================
// 初期設定
//============================================================================
HRESULT CTimer::Init()
{
	NumberDisp(); // 数字表示更新
	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CTimer::Uninit()
{
	// 特になし
}

//============================================================================
// 更新処理
//============================================================================
void CTimer::Update()
{
	m_nCntFrame++; // フレーム数カウント

	// 60フレームごとに時間を１秒減らす
	if (m_nCntFrame % 60 == 0)
	{
		m_nNowTime -= 1;
		NumberDisp(); // 数字表示更新
	}

	// 時間が０以下になったら終了出来るというフラグをオンにする
	if (m_nNowTime <= 0)
	{
		m_bEnd = true;
	}
}

//============================================================================
// 描画処理
//============================================================================
void CTimer::Draw()
{
	// 何もなし
}

//============================================================================
// 位置取得
//============================================================================
const D3DXVECTOR3& CTimer::GetPos() const
{
	return m_Pos;
}

//============================================================================
// 位置設定
//============================================================================
void CTimer::SetPos(D3DXVECTOR3 Pos)
{
	m_Pos = Pos;
}

//============================================================================
// 数字のサイズ取得
//============================================================================
const D3DXVECTOR3& CTimer::GetNumberSize() const
{
	return m_NumberSize;
}

//============================================================================
// 数字のサイズ設定
//============================================================================
void CTimer::SetNumberSize(D3DXVECTOR3 Size)
{
	m_NumberSize = Size;
}

//============================================================================
// 現在の時間取得
//============================================================================
const int& CTimer::GetNowTime() const
{
	return m_nNowTime;
}

//============================================================================
// 現在の時間設定
//============================================================================
void CTimer::SetNowTime(int nTime)
{
	m_nNowTime = nTime;
}

//============================================================================
// 終了したかどうか取得
//============================================================================
const bool& CTimer::GetEnd() const
{
	return m_bEnd;
}

//============================================================================
// 生成
//============================================================================
CTimer* CTimer::Create(D3DXVECTOR3 InitPos, D3DXVECTOR3 InitSize)
{
	// インスタンスを生成
	CTimer* pTimer = DBG_NEW CTimer();

	if (pTimer == nullptr)
	{ // 生成失敗
		assert(false);
	}

	// タイプを設定
	pTimer->SetType(TYPE::TIMER);

	// 初期位置の設定
	pTimer->SetPos(InitPos);

	// 初期サイズの設定
	pTimer->SetNumberSize(InitSize);

	for (int nCnt = 0; nCnt < pTimer->m_nNumDigit; nCnt++)
	{
		CNumber* pNumber = CNumber::Create(pTimer->GetPos() - D3DXVECTOR3((pTimer->GetNumberSize().x + 5.0f) * nCnt,0.0f,0.0f)); // 数字生成
		pNumber->SetSize(pTimer->GetNumberSize()); // 数字のサイズ設定
		pTimer->m_vpNumber.push_back(pNumber);     // 末尾に数字表示を追加
	}

	// 初期化処理
	pTimer->Init();

	return pTimer;
}

//============================================================================
// 生成
//============================================================================
void CTimer::NumberDisp()
{
	int nNowTime = m_nNowTime; // 現在の時間
	int nPatternU = 0; // テクスチャU
	for (auto Number : m_vpNumber)
	{
		nPatternU = nNowTime % 10;         // 桁を取得
		Number->SetNowPatternU(nPatternU); //テクスチャ座標Uを設定
		nNowTime /= 10; // 桁数を減らす
	}
}
