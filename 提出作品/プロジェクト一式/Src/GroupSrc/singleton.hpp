//============================================================================
// 
// シングルトンクラステンプレート、ヘッダファイル [singleton.hpp]
// Author : 福田歩希
// 
//============================================================================

// インクルードガード
#pragma once

//****************************************************
// シングルトンクラステンプレートの定義
//****************************************************
template <typename T> class CSingleton
{
public:

	//****************************************************
	// operator
	//****************************************************
	CSingleton& operator=(const CSingleton&) = delete;	// コピー代入演算子を削除
	CSingleton& operator=(CSingleton&&) = delete;		// ムーブ代入演算子を削除

	//****************************************************
	// special function
	//****************************************************
	CSingleton(const CSingleton&) = delete;	// コピーコンストラクタを削除
	CSingleton(CSingleton&&) = delete;		// ムーブコンストラクタを削除

	//****************************************************
	// function
	//****************************************************

	/**
	 * インスタンスを参照します
	 * 
	 * このメソッドが呼ばれた時にインスタンスが生成されていなければ、
	 * 暗黙的にインスタンスを生成します
	 */
	static T* GetInstance();
	//template<typename... Args> static T* GetInstance(Args&&... args);]

	/**
	 * インスタンスを明示的に破棄します
	 * 
	 * シングルトンでありながらシーン別に存在して欲しい場合や、
	 * パラメータの再読み込み時のリセットとして使用出来ます
	 */
	static void ExplicitRelease();

protected:

	//****************************************************
	// special function
	//****************************************************
	CSingleton() = default;				// デフォルトコンストラクタ
	virtual ~CSingleton() = default;	// デストラクタ

	//****************************************************
	// data
	//****************************************************
	static std::unique_ptr<T> s_upInstance;	// インスタンスのポインタ
};

//****************************************************
// インクルードファイル
//****************************************************

// テンプレート定義用ファイル
#include "singleton.tpp"