//============================================================================
// 
// ２０２５年５月１５日：タイムスケール情報クラスを作成する [timescale_info.cpp]
// Author : 椎名太陽
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "timescale_info.h" //元ヘッダ

//****************************************************
// usingディレクティブ
//****************************************************
using namespace useful;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CTimeScale_Info::CTimeScale_Info() : 
	m_nChangeFrame(0),
	m_nChangeFrameCnt(0),
	m_fTimeScale(1.0f),
	m_fAdjustGoalTimeScale(1.0f),
	m_bUseChangeFrame{false},
	m_fGoalTimeScale{1.0f},
	m_bUseGoalTimeScale{false }
{
	// 何もなし
}

//============================================================================
// デストラクタ
//============================================================================
CTimeScale_Info::~CTimeScale_Info()
{
	// 何もなし
}

//============================================================================
// 更新
//============================================================================
void CTimeScale_Info::Update()
{
	// タイムスケールを指定フレーム数だけ変える
	if (m_bUseChangeFrame)
	{
		TimeScaleChangeFrame();
	}

	// 目的の値に近づける
	if (m_bUseGoalTimeScale)
	{
		GoalTimeScale();
	}
}

//============================================================================
// タイムスケールを設定する
//============================================================================
void CTimeScale_Info::SetTimeScale(float fTimeScale)
{
	m_fTimeScale = fTimeScale; // タイムスケール
	m_bUseChangeFrame = false; // 普通に設定したので変更フレーム数を使用しない
	m_nChangeFrame = 0;    // 変更フレーム数初期化
	m_nChangeFrameCnt = 0; // 変更フレーム数カウント初期化
}

//============================================================================
// タイムスケールを取得する
//============================================================================
const float& CTimeScale_Info::GetTimeScale() const
{
	return m_fTimeScale;
}

//============================================================================
// 目的のタイムスケールに近づける
//============================================================================
void CTimeScale_Info::SetGoalTimeScale(float fGoalTimeScale, float fAdjust)
{
	ResetInfo(); // 情報初期化
	m_bUseGoalTimeScale = true;
	m_fGoalTimeScale = fGoalTimeScale; // 目的のタイムスケール
	m_fAdjustGoalTimeScale = fAdjust;  // 補正値
}

//============================================================================
// タイムスケールを指定フレーム数だけ変えるように設定
//============================================================================
void CTimeScale_Info::SetTimeScaleChangeFrame(float fTimeScale, int nChangeFrame)
{
	ResetInfo(); // 情報初期化

	m_fTimeScale = fTimeScale; // タイムスケール
	m_bUseChangeFrame = true;      // タイムスケールを指定フレーム数だけ変える
	m_nChangeFrame = nChangeFrame; // タイムスケールを変えるフレーム数
	m_nChangeFrameCnt = 0; // タイムスケールを変えるフレーム数カウント初期化
}

//============================================================================
// 
// privateメンバ
// 
//============================================================================

//============================================================================
// タイムスケールを指定フレーム数だけ変える処理
//============================================================================
void CTimeScale_Info::TimeScaleChangeFrame()
{
	// 設定した変更フレーム数に達したらタイムスケールをリセット
	if (m_nChangeFrameCnt >= m_nChangeFrame)
	{
		m_fTimeScale = 1.0f;
	}

	m_nChangeFrameCnt++; // タイムスケールを変える時間をカウントする
}

//============================================================================
// 目的のタイムスケールに近づける
//============================================================================
void CTimeScale_Info::GoalTimeScale()
{
	float fDiff = m_fGoalTimeScale - m_fTimeScale; // 目的の値との差分

	m_fTimeScale += fDiff * m_fAdjustGoalTimeScale; // 徐々に目的の値に近づける

	// 目的の値に近づいたら
	if (m_fTimeScale > m_fGoalTimeScale - 0.01f &&
		m_fTimeScale < m_fGoalTimeScale + 0.01f)
	{
		m_fTimeScale = m_fGoalTimeScale; // 目的の値に設定
		m_bUseGoalTimeScale = false; // 使用しない
	}
}

//============================================================================
// 情報初期化
//============================================================================
void CTimeScale_Info::ResetInfo()
{
	m_bUseChangeFrame = false; // 普通に設定したので変更フレーム数を使用しない
	m_nChangeFrame = 0;    // 変更フレーム数初期化
	m_nChangeFrameCnt = 0; // 変更フレーム数カウント初期化
	m_bUseGoalTimeScale = false; // 目的のタイムスケールに近づける
	m_fAdjustGoalTimeScale = 1.0f;
	m_fGoalTimeScale = 1.0f;
}
