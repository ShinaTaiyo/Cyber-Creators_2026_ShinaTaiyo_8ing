//============================================================================
// 
// シングルトンクラステンプレート、定義用ファイル [singleton.tpp]
// Author : 福田歩希
// 
//============================================================================

// インクルードガード
#pragma once

//****************************************************
// インクルードファイル
//****************************************************
#include "singleton.hpp"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace useful;

//****************************************************
// 静的メンバ関数の初期化
//****************************************************

// インスタンスのポインタ
template <typename T> up<T> CSingleton<T>::s_upInstance = nullptr;

//============================================================================
// インスタンスの取得
//============================================================================
template <typename T> T* CSingleton<T>::GetInstance()
{
	if (s_upInstance)
	{
		return s_upInstance.get();
	}

	up<T> upInstance(DBG_NEW T());
	s_upInstance = std::move(upInstance);

	if (!s_upInstance->Initialize())
	{
		s_upInstance->Finalize();
	}

	return s_upInstance.get();
}

//============================================================================
// インスタンスの明示的な破棄
//============================================================================
template <typename T> void CSingleton<T>::ExplicitRelease()
{
	if (s_upInstance)
	{
		s_upInstance->Finalize();
		s_upInstance.reset();
	}
}