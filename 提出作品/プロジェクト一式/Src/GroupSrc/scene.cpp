//============================================================================
// 
// シーン管理 [scene.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "scene.h"
#include "title.h"
#include "game.h"
#include "result.h"
#include "renderer.h"

//****************************************************
// 静的メンバ変数の初期化
//****************************************************
CScene_Manager* CScene_Manager::m_pSceneManager = nullptr;	// シーンマネージャーの本体

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// 生成
//============================================================================
HRESULT CScene_Manager::Create()
{
	// 既に生成されていたら
	if (m_pSceneManager != nullptr)
	{
#ifdef _DEBUG
		CRenderer::SetTimeString("シーンマネージャーは既に生成されています", 120);
#endif	// _DEBUG

		return S_OK;
	}

	// インスタンスを生成
	m_pSceneManager = DBG_NEW CScene_Manager();

	// 生成失敗
	if (m_pSceneManager == nullptr)
	{
		return E_FAIL;
	}

	// シーンマネージャーの初期設定
	if (FAILED(m_pSceneManager->Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//============================================================================
// 解放
//============================================================================
void CScene_Manager::Release()
{
	if (m_pSceneManager != nullptr)
	{
		// シーンマネージャーの終了処理
		m_pSceneManager->Uninit();

		// メモリの解放
		delete m_pSceneManager;

		// ポインタの初期化
		m_pSceneManager = nullptr;
	}
}

//============================================================================
// シーン変更
//============================================================================
void CScene_Manager::ChangeScene(CScene* pScene)
{
	// 引数の異常
	if (pScene == nullptr)
	{
		assert(false && "シーン変更の引数が異常");
	}

	// 現在のシーンを破棄
	if (m_pSceneManager->m_pScene != nullptr)
	{
		// シーンの解放
		m_pSceneManager->m_pScene->Release();

		// ポインタを初期化
		m_pSceneManager->m_pScene = nullptr;
	}

	// シーンをセット
	m_pSceneManager->m_pScene = pScene;
}

//============================================================================
// シーン取得
//============================================================================
CScene* CScene_Manager::GetScene()
{
	// 本体が存在しなければ
	if (m_pScene == nullptr)
	{
		assert(false && "シーンの取得に失敗");
	}

	return m_pScene;
}

//============================================================================
// シーンマネージャーを取得
//============================================================================
CScene_Manager* CScene_Manager::GetInstance()
{
	// 本体が存在しなければ
	if (m_pSceneManager == nullptr)
	{
		// 生成
		if (FAILED(Create()))
		{
			assert(false && "シーンマネージャーの取得に失敗");
		}
	}

	return m_pSceneManager;
}

//============================================================================
// 
// privateメンバ
// 
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CScene_Manager::CScene_Manager() :
	m_pScene{ nullptr }
{

}

//============================================================================
// デストラクタ
//============================================================================
CScene_Manager::~CScene_Manager()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CScene_Manager::Init()
{
	// 最初のシーンを生成しておく
	m_pScene = CTitle::Create();

	// 生成失敗
	if (m_pScene == nullptr)
	{
		return E_FAIL;
	}

	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CScene_Manager::Uninit()
{
	// シーンの破棄
	if (m_pScene != nullptr)
	{
		// シーンの解放
		m_pScene->Release();

		// ポインタを初期化
		m_pScene = nullptr;
	}

	// 全てのUIテキストをクリアする
	CRenderer::GetRenderer()->GetUiTextManager().Clear();
}

//============================================================================
// 
// シーンクラス
// 
//============================================================================

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// 更新処理
//============================================================================
void CScene::Update()
{
#ifdef _DEBUG
	// 現在のシーンを表示
	CRenderer::GetRenderer()->SetDebugString("現在のシーンのクラス -> " + static_cast<std::string>(typeid(*CScene_Manager::GetInstance()->GetScene()).name()));
#endif	// _DEBUG
}

//============================================================================
// 描画処理
//============================================================================
void CScene::Draw()
{

}

//============================================================================
// 解放
//============================================================================
void CScene::Release()
{
	// シーンの終了処理
	Uninit();

	// シーンを解放
	delete this;
}

//============================================================================
// 
// protectedメンバ
// 
//============================================================================

//============================================================================
// コンストラクタ
//============================================================================
CScene::CScene()
{

}

//============================================================================
// デストラクタ
//============================================================================
CScene::~CScene()
{

}

//============================================================================
// 初期設定
//============================================================================
HRESULT CScene::Init()
{
	return S_OK;
}

//============================================================================
// 終了処理
//============================================================================
void CScene::Uninit()
{

}