//============================================================================
// 
// HayuLib、テンプレート定義用ファイル [HayuLib.tpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "HayuLib.hpp"

//============================================================================
// 解放
//============================================================================
template <typename T> void hws::MyDelete(T& Obj)
{
	if (Obj)
	{
		delete Obj;
		Obj = nullptr;
	}
}

//============================================================================
// 終了処理
//============================================================================
template <typename T> void hws::MyRelease(T& Obj)
{
	if (Obj)
	{
		Obj->Release();
		Obj = nullptr;
	}
}

//============================================================================
// 終了処理
//============================================================================
template <typename T> void hws::MyUninit(T& Obj)
{
	if (Obj)
	{
		Obj->Uninit();
		Obj = nullptr;
	}
}

//============================================================================
// 乱数生成
//============================================================================
template <typename T> T hws::GetRandomValue()
{
	// 数値の取る範囲を設定
	const int nRange = 180;

	// 倍の範囲からランダムな整数を生成
	int nRandom{ rand() % (nRange * 2) };

	// もとの範囲を超えていた場合正負を反転
	if (nRandom > nRange)
	{
		nRandom %= nRange;
		nRandom *= -1;
	}

	// 整数を指定された型にキャスト
	return static_cast<T>(nRandom);
}

//============================================================================
// 乱数生成
//============================================================================
template <typename T> auto hws::GetRandomValue(T Range) -> decltype(Range)
{
	// 数値の取る範囲を設定
	const int nRange = static_cast<int>(Range);

	// 倍の範囲からランダムな整数を生成
	int nRandom{ rand() % (nRange * 2) };

	// もとの範囲を超えていた場合正負を反転
	if (nRandom > nRange)
	{
		nRandom %= nRange;
		nRandom *= -1;
	}

	// 戻り値の型は引数依存
	return nRandom;
}

//============================================================================
// 型情報をstring型に変換
//============================================================================
template <typename T> const std::string& hws::TypeConvetToString(T type)
{
	return static_cast<std::string>(typeid(type).name());
}

//============================================================================
// ダウンキャスト
//============================================================================
template <typename T1, typename T2> T1* hws::DownCast(T2* pBase)
{
	// 引数のオブジェクトを指定されたクラスにダウンキャスト
	T1* pObj = dynamic_cast<T1*>(pBase);

	// ダウンキャスト失敗
	if (!pObj) throw std::bad_cast();

	return pObj;
}