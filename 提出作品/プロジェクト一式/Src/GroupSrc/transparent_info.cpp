//============================================================================
// 
// ２０２５年５月１５日：透明情報クラスを作成する [Transparent_info.cpp]
// Author : 椎名太陽
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "transparent_info.h" //元ヘッダ
#include "renderer.h" // デバッグ表示用

//****************************************************
// usingディレクティブ
//****************************************************
using namespace useful;

//============================================================================
// コンストラクタ
//============================================================================
CTransparent_Info::CTransparent_Info(int nMaxValue, int nValue, bool bUse, int nSpeed) :
	m_nMaxValue{ nMaxValue },
	m_nValue{ nValue },
	m_bUse{ bUse },
	m_nSpeed{ nSpeed }
{

}

//============================================================================
// デストラクタ
//============================================================================
CTransparent_Info::~CTransparent_Info()
{

}

//============================================================================
// 更新
//============================================================================
void CTransparent_Info::Update(D3DXCOLOR& Col)
{
	// 透明度情報を使用するなら
	if (m_bUse)
	{
		m_nValue += m_nSpeed; // 値を増やし透明度を変える

		// 最大を超えたら固定
		if (m_nValue > m_nMaxValue)
		{
			m_nValue = m_nMaxValue;
		}

		// 最低値を下回ったら固定
		if (m_nValue < 1)
		{
			m_nValue = 0;
		}

		// 現在の値の割合を求める
		float fRatio = static_cast<float>(m_nValue) / static_cast<float>(m_nMaxValue);

		// 上記の値を基に透明度を産出
		Col.a = fRatio;
	    CRenderer::SetDebugString("透明度割合：" + to_string(fRatio));
	}

	CRenderer::SetDebugString("透明度値：" + to_string(m_nValue));
}

//============================================================================
// 透明度値取得
//============================================================================
const int& CTransparent_Info::GetValue() const
{
	return m_nValue;
}

//============================================================================
// 透明度値設定
//============================================================================
void CTransparent_Info::SetValue(int nValue)
{
	m_nValue = nValue;
}

//============================================================================
// 透明度最大値取得
//============================================================================
const int& CTransparent_Info::GetMaxValue() const
{
	return m_nMaxValue;
}

//============================================================================
// 透明度最大値設定
//============================================================================
void CTransparent_Info::SetMaxValue(int nMaxValue)
{
	m_nMaxValue = nMaxValue;
}

//============================================================================
// 透明度増加速度取得
//============================================================================
const int& CTransparent_Info::GetSpeed() const
{
	return m_nSpeed;
}

//============================================================================
// 透明度増加速度設定
//============================================================================
void CTransparent_Info::SetSpeed(int nSpeed)
{
	m_nSpeed = nSpeed;
}

//============================================================================
// 処理を使用するかどうか取得
//============================================================================
const bool& CTransparent_Info::GetUse() const
{
	return m_bUse;
}

//============================================================================
// 処理を使用するかどうか設定
//============================================================================
void CTransparent_Info::SetUse(bool bUse)
{
	m_bUse = bUse;
}
