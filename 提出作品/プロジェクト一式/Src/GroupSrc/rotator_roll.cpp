//============================================================================
// 
// Roll軸回転制御 [rotator_roll.cpp]
// Author : 福田歩希
// 
//============================================================================

//****************************************************
// インクルードファイル
//****************************************************
#include "rotator_roll.h"

//****************************************************
// usingディレクティブ
//****************************************************
using namespace useful;

//============================================================================
// 
// publicメンバ
// 
//============================================================================

//============================================================================
// デフォルトコンストラクタ
//============================================================================
CRotatorRoll::CRotatorRoll() :
	nLimit_(0),
	fAngle_(0.0f),
	Flags_(RotatorRollFlags::None)
{}

//============================================================================
// 実行
//============================================================================
void CRotatorRoll::Rotate(D3DXVECTOR3& vec)
{
	// 処理の寿命現象
	--nLimit_;

	// 回転処理用のフラグが立っているなら
	switch (Flags_ & RotatorRollFlags::Rolling)
	{
		// 揺れ処理
	case RotatorRollFlags::Swaying:
		Swaying(vec);
		break;

		// 回転処理
	case RotatorRollFlags::Rolling:
		Rolling(vec);
		break;

		// 特に無し
	default:
		break;
	}
}

//============================================================================
// 揺れ処理
//============================================================================
void CRotatorRoll::Swaying(D3DXVECTOR3& vec)
{
	/* 追加予定 */
}

//============================================================================
// 回転処理
//============================================================================
void CRotatorRoll::Rolling(D3DXVECTOR3& vec)
{
	// 角度を変動
	fAngle_ += fSpeed_;

	// 上方向ベクトルを回転制御
	vec.x = cosf(fAngle_);
	vec.y = sinf(fAngle_);
}